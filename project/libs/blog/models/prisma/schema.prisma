// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum PostContent {
  video
  photo
  link
  quote
  text
}

enum PostStatus {
  posted
  draft
}

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id             String      @id @default(uuid())
  userId         String?     @map("user_id")
  type           PostContent
  status         PostStatus  @default(posted)
  tags           String[]
  comments       Comment[]
  likes          Like[]
  createdAt      DateTime    @default(now()) @map("created_at")
  postedAt       DateTime    @default(now()) @map("posted_at")
  isReposted     Boolean     @default(false) @map("is_reposted")
  originalUserId String?
  originalPostId String?     @map("original_post_id")
  title          String?
  description    String?
  link           String?
  quoteAuthor    String?
  excerpt        String?

  @@index([title])
  @@map("posts")
}

model Comment {
  id          String    @id @default(uuid())
  message     String
  userId      String    @map("user_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String    @map("post_id")

  @@index([postId])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("likes")
}

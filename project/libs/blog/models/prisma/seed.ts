import { PrismaClient } from '@prisma/client';
import { PostContent } from '../../../shared/core/src';

const FIRST_POST_UUID = '6d308040-96a2-4162-bea6-2338e9976540';
const SECOND_POST_UUID = 'ab04593b-da99-4fe3-8b4b-e06d82e2efdd';
const THIRD_POST_UUID = 'cc38c0dc-750f-4015-8d2e-28f132fc861a';

const FIRST_USER_ID = '41d7e142-c8e5-44d3-806e-1d7d1f71fbb9';
const SECOND_USER_ID = 'b39c84dd-9dc5-49c6-8d82-55f86510b1c5 ';

function getLikes() {
  return [
    { userId: FIRST_USER_ID },
    { userId: SECOND_USER_ID },
  ];
}

function getComments() {
  return [
    {
      message: '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ!',
      userId: SECOND_USER_ID,
    },
    {
      message: '–ù–∞–¥–æ –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å. –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
      userId: FIRST_USER_ID,
    }
  ];
}

function getPosts() {
  return [
    {
      id: FIRST_POST_UUID,
      title: '–ú–æ—è —Ä–µ—Ü–µ–Ω–∑–∏—è –Ω–∞ –∫–Ω–∏–≥—É ¬´–•—É–¥–µ—é—â–∏–π¬ª',
      userId: FIRST_USER_ID,
      type: PostContent.text,
      excerpt: '–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–ª —Å—Ç—Ä–∞—à–Ω—ã–π —Ä–æ–º–∞–Ω ¬´–•—É–¥–µ—é—â–∏–π¬ª.',
      description: '–ù–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö —Å—Ç—Ä–∞—à–Ω—ã—Ö —Ä–æ–º–∞–Ω–æ–≤ –°—Ç–∏–≤–µ–Ω–∞ –ö–∏–Ω–≥–∞.',
      likes: [
        getLikes()[1]
      ],
    },
    {
      id: SECOND_POST_UUID,
      title: '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ Node js - –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
      type: PostContent.video,
      link: 'https://www.youtube.com/watch?v=86npYplqO5Q',
      userId: SECOND_USER_ID,
      description: '–í —ç—Ç–æ–º –≤–∏–¥–µ–æ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ Node.js: —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–¥—É–ª—å crypto, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ –º–µ—Ç–æ–¥—ã: createCipher, createCipherIv, createDecipherIv, createHash, randomBytes, scrypt –∏ –¥—Ä—É–≥–∏–µ.',
      tags: ['JS, programming'],
      likes: [
        getLikes()[0]
      ],
      comments: [
        ...getComments()
      ]
    },
    {
      id: THIRD_POST_UUID,
      userId: SECOND_USER_ID,
      type: PostContent.quote,
      quoteAuthor: '–ì–µ—Ä–º–∞–Ω –ì–µ—Å—Å–µ',
      description: '–í –æ—Å–Ω–æ–≤–Ω–æ–º —Å–≤–æ–±–æ–¥—É —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±–æ—Ä–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
      tags: ['quotes'],
    },
  ]
}

async function seedDb(prismaClient: PrismaClient) {
  const mockPosts = getPosts();

  for (const post of mockPosts) {
    await prismaClient.post.create({
      data: {
        id: post.id,
        userId: post.userId,
        type: post.type,
        tags: post.tags,
        likes: post.likes ? {
          create: post.likes
        } : undefined,
        comments: post.comments ? {
          create: post.comments
        } : undefined,
        title: post.title,
        description: post.description,
        link: post.link,
        quoteAuthor: post.quoteAuthor,

      }
    })
  }

  console.info('ü§òÔ∏è Database was filled');
}

async function bootstrap() {
  const prismaClient = new PrismaClient();

  try {
    await seedDb(prismaClient);
    globalThis.process.exit(0);
  } catch (error: unknown) {
    console.error(error);
    globalThis.process.exit(1);
  } finally {
    await prismaClient.$disconnect();
  }
}

bootstrap();
